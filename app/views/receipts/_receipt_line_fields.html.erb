<!-- app/views/receipts/_receipt_line_fields.html.erb -->
<tr class="receipt-line">

 
  
  
  <td>
    <%= f.select :account_type, options_for_select(
      [['Bank', 'bank'], ['Customer', 'customer'], ['G/L Account', 'g/l_account']], f.object.account_type
    ), {}, { class: 'form-control account_type' } %>
  </td>
  <td>
    <div class="account_no_select">
      <%= f.select :account_no, [], { prompt: "Select Account" }, { class: "form-control account_no" } %>
    </div>
 </td>

  
  
  
  
  
  
  
  
 
  <td><%= f.text_field :account_name %></td>
  <td><%= f.text_field :amount %></td>
  <td><%= f.text_field :invoiceno %></td>
  <td><%= link_to 'Remove', '#', class: 'remove-receipt-line btn btn-danger' %></td>
  

</tr>

<script>

   document.addEventListener("DOMContentLoaded", () => {
  // Initialize for all rows
  initializeRows();

  // Function to initialize rows
  function initializeRows() {
    document.querySelectorAll(".receipt-line").forEach((row, index) => {
      setupRow(row, index);
    });
  }

  // Function to setup a single row
  function setupRow(row, index) {
    const accountTypeField = row.querySelector(".account_type");
    const accountNoFieldContainer = row.querySelector(".account_no_select");

    // Restore saved values for this row
    const savedAccountType = localStorage.getItem(`account_type_${index}`);
    const savedAccountNo = localStorage.getItem(`account_no_${index}`);

    if (savedAccountType) {
      accountTypeField.value = savedAccountType;
      fetchOptions(savedAccountType, savedAccountNo, accountNoFieldContainer, index);
    }

    // Save account_type on change
    accountTypeField.addEventListener("change", (event) => {
      const selectedType = event.target.value;
      localStorage.setItem(`account_type_${index}`, selectedType);
      fetchOptions(selectedType, null, accountNoFieldContainer, index); // Reset account_no when type changes
    });

    // Save account_no on change
    accountNoFieldContainer.addEventListener("change", (event) => {
      const accountNoField = accountNoFieldContainer.querySelector("select");
      if (accountNoField) {
        const selectedAccountNo = accountNoField.value;
        localStorage.setItem(`account_no_${index}`, selectedAccountNo);
      }
    });
  }

  // Function to fetch and populate options for account_no
  function fetchOptions(accountType, selectedAccountNo, container, index) {
    let url;

    if (accountType === "bank") {
      url = "/banks";
    } else if (accountType === "customer") {
      url = "/customers";
    } else if (accountType === "g/l_account") {
      url = "/gl_accounts";
    }

    if (url) {
      fetch(url)
        .then((response) => response.json())
        .then((data) => {
          const options = data
            .map(
              (item) =>
                `<option value="${item.id}" ${
                  selectedAccountNo === String(item.id) ? "selected" : ""
                }>${item.name}</option>`
            )
            .join("");
          container.innerHTML = `
            <select name="receipt[receipt_lines_attributes][${index}][account_no]" class="form-control account_no">
              <option value="">Select Account</option>
              ${options}
            </select>`;
        })
        .catch((error) => console.error("Error fetching account_no options:", error));
    } else {
      container.innerHTML = "<em>Please select an account type.</em>";
    }
  }

  // Attach event listener for dynamically added rows
  document.addEventListener("click", (event) => {
    if (event.target.classList.contains("add-receipt-line")) {
      setTimeout(() => {
        const newRows = document.querySelectorAll(".receipt-line");
        const newIndex = newRows.length - 1; // Get the index of the last row
        const newRow = newRows[newIndex];
        setupRow(newRow, newIndex);
      }, 100); // Slight delay to ensure the DOM is updated
    }
  });
});


  

      

</script>










